// admin module
const Admin = require('./models/admin');

// this api  function    for  admin
// create  app frp for app Store
app.post('/admin/create/app', function(req, res) {
  const limit = req.body.limit;
  const out = {};
  out.auth = req.headers.token;
  out.uID = req.headers.uid;
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          const app = {};
          app.appImageUrl = req.body.appImageUrl;
          app.appInfo = req.body.appInfo;
          app.appName = req.body.appName;
          app.userID = req.body.userID;
          app.version = req.body.version;
          App.createApp(app, function(err, app) {});
          res.status(200);
          res.json(respond(true, 'Done', app));
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
// delete  app frp for app Store
app.post('/admin/update/app/image', function(req, res) {
  const id = req.body.id;
  const image = req.files.image;
  const imageName = image.name;
  const out = {};
  out.auth = req.headers.token;
  out.uID = req.headers.uid;
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          const imagePath = 'assets/images/app/' + imageName;
          image.mv('../' + imagePath, function(err) {
            if (err) return res.status(500).send(err);
            App.appImageUpdate(id, imagePath, {}, function(err, update) {});
            res.status(200);
            res.json(respond(true, 'Image Update Done', app));
          });
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
app.post('/admin/update/app', function(req, res) {
  const id = req.body.id;
  const out = {};
  out.auth = req.headers.token;
  out.uID = req.headers.uid;
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          App.appUpdateData(id, req.body, {}, function(err, data) {});
          res.status(200);
          res.json(respond(true, 'info Update Done', app));
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
// delete  app frp for app Store
app.post('/admin/delete/app', function(req, res) {
  const id = req.body.id;
  const out = {};
  out.auth = req.headers.token;
  out.uID = req.headers.uid;
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          App.deleteApp(id, function(err, app) {});
          res.status(200);
          res.json(respond(true, 'Delete Done', app));
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
// get all  PC
app.post('/admin/pc', function(req, res) {
  const limit = req.body.limit;
  const out = {};
  out.auth = req.headers.token;
  out.uID = req.headers.uid;
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          PC.getAllPC(limit, function(err, pc) {
            if (user) {
              res.status(200);
              res.json(respond(true, 'All PC', pc));
            } else {
              res.status(401);
              res.json(respond(false, 'Invalid User', null));
            }
          });
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
// get all  users
app.post('/admin/users', function(req, res) {
  const limit = req.body.limit;
  const out = {};
  out.auth = req.headers.token;
  out.uID = req.headers.uid;
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          User.getUsers(limit, function(err, user) {
            if (user) {
              res.status(200);
              res.json(respond(true, 'All Users', user));
            } else {
              res.status(401);
              res.json(respond(false, 'Invalid User', null));
            }
          });
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
app.post('/admin/admin/create', function(req, res) {
  const out = {};
  out.auth = req.headers.token;
  out.id = req.body.userID;
  out.uID = req.headers.uid;
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          Admin.searchAdmin(out.id, function(err, admin) {
            if (!admin) {
              Admin.createAdmin(out, function(err, admin) {
                if (err) {
                  throw err;
                }
                //  get user info  using   id
                User.getUser(out.id, function(err, user) {
                  if (user) {
                    res.status(200);
                    res.json(respond(true, ' New Admin', user));
                  } else {
                    res.status(401);
                    res.json(respond(false, 'Invalid User', null));
                  }
                });
              });
            } else {
              res.status(401);
              res.json(respond(false, 'Admin  Already exit', null));
            }
          });
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
app.post('/admin/user/status', function(req, res) {
  const out = {};
  out.auth = req.headers.token;
  out.id = req.body.userID;
  out.status = req.body.status;
  out.uID = req.headers.uid;
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          User.updateUserStatus(out.id, out, {}, function(err, user) {
            User.getUser(out.id, function(err, userWithNewStatus) {
              res.status(200);
              res.json(respond(true, 'Status Update', userWithNewStatus));
            });
          });
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
//  create   software   version
app.post('/admin/software/create', function(req, res) {
  const out = {};
  out.auth = req.headers.token;
  out.status = req.body.status;
  out.uID = req.headers.uid;
  out.version = req.body.version;
  out.versionKey = md5(req.body.version);
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          Software.getSoftware(out.versionKey, function(err, softwareIn) {
            if (!softwareIn) {
              Software.createSoftwareVersion(out, function(err, software) {
                if (err) {
                  throw err;
                }
                res.status(200);
                res.json(respond(true, 'new Software ', software));
              });
            } else {
              res.status(401);
              res.json(respond(false, 'Software  Already exit', null));
            }
          });
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
//  get all   software   version
app.post('/admin/software/all', function(req, res) {
  const out = {};
  out.auth = req.headers.token;
  out.limit = req.body.limit;
  out.uID = req.headers.uid;
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          Software.getSoftwares(out, function(err, software) {
            res.status(200);
            res.json(respond(software, true, 'All Software '));
          });
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});
// TODO  need to  complete
app.post('/admin/software/notification', function(req, res) {
  const out = {};
  out.auth = req.headers.token;
  out.status = req.body.status;
  out.uID = req.headers.uid;
  out.version = req.body.version;
  out.versionKey = md5(req.body.version);
  User.authUser(out.uID, out.auth, function(err, user) {
    if (user) {
      Admin.authAdmin(out.uID, function(err, admin) {
        if (admin) {
          Software.getSoftware(out.versionKey, function(err, softwareIn) {
            if (!softwareIn) {
              Software.createSoftwareVersion(out, function(err, software) {
                if (err) {
                  throw err;
                }
                res.status(200);
                res.json(respond(true, 'new Software ', software));
              });
            } else {
              res.status(401);
              res.json(respond(false, 'Software  Already exit', null));
            }
          });
        } else {
          res.status(401);
          res.json(respond(false, 'Authenticating Error Admin', null));
        }
      });
    } else {
      res.status(401);
      res.json(respond(false, 'Authenticating Error', null));
    }
  });
});


  app.post('/pc/downloadFileRequest', function(req, res) {
    const auth = req.headers.token;
    const id = req.body.id;
    const path = req.body.path;
    const pcKeyPublic = req.body.pcKeyPublic;
    User.authUser(id, auth, function(err, user) {
      if (user) {
        const output = {};
        output.path = path;
        getPCSocketID(user, pcKeyPublic, function(socket) {
          io.sockets.to(socket).emit('downloadFileRequest', output);
        });
      }
    });
  });

    // copy file  location ad paste file  location
  socket.on('copyPasteToPC', function(input) {
    const auth = input.auth;
    const id = input.id;
    User.authUser(id, auth, function(err, user) {
      if (user) {
        io.sockets.in(user.ioSocketID).emit('copyPasteToPCApp', input.data);
      }
    });
  });
  // copy  and paste  Done
  socket.on('pasteDone', function(input) {
    const auth = input.auth;
    const id = input.id;
    const pcKey = md5(input.pcKey);
    PC.authApp(id, auth, pcKey, function(err, pc) {
      User.getUser(id, function(err, user) {
        if (user) {
          roomID = user.ioSocketID;
        }
      });
      if (pc) {
        io.sockets.in(user.ioSocketID).emit('pasteDone', input.data);
      }
    });
  });
  // file  transfer
  socket.on('uploadFileInfo_to_pc', function(input) {
    const auth = input.auth;
    const id = input.id;
    User.authUser(id, auth, function(err, user) {
      if (user) {
        io.sockets.in(user.ioSocketID).emit('uploadFileInfo_from_web', input.data);
      }
    });
  });
  socket.on('uploadFile_chunk_to_pc', function(input) {
    const auth = input.auth;
    const id = input.id;
    User.authUser(id, auth, function(err, user) {
      if (user) {
        io.sockets.in(user.ioSocketID).emit('uploadFile_chunk_from_web', input.data);
      }
    });
  });
  socket.on('fileSendingFromPc', function(input) {});